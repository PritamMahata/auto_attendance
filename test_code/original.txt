#include <WiFi.h>
#include <FirebaseESP32.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include "esp_wifi.h"
#include "time.h"

#define FIREBASE_HOST "https://esp32-73a15-default-rtdb.firebaseio.com/"
#define FIREBASE_AUTH "1hffIReG4utWvgRng68oCyUi3j6WMyNM30W1s7Uw"
#define LED 2
const int ledPin = 2;
FirebaseData firebaseData;
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 19800); // UTC offset for IST is 5 hours and 30 minutes (19800 seconds)

String bssid;
const int maxStations = 10; // Maximum number of stations to store
String stationMacs[maxStations];
int numStations = 0;
String name = "pritam";
int count = 0;
bool time_calibration = false;

struct ClientInfo {
  String macAddress;
  String name;
  unsigned long joinTime;
  unsigned long connectionTime;
};

const int maxClients = 10;
ClientInfo clients[maxClients];
int numClients = 0;

void PrintStations() {
  wifi_sta_list_t stationList;
  esp_wifi_ap_get_sta_list(&stationList);

  Serial.print("Number of connected stations: ");
  Serial.println(stationList.num);

  numStations = min(stationList.num, maxStations); // Limit the number of stations to store

  for (int i = 0; i < numStations; i++) {
    wifi_sta_info_t station = stationList.sta[i];
    String macAddress;
    for (int j = 0; j < 6; j++) {
      char str[3];
      sprintf(str, "%02X", (int)station.mac[j]);
      macAddress += str;
      if (j < 5) {
        macAddress += ":";
      }
    }
    stationMacs[i] = macAddress;
  }

  Serial.println("Connected station MAC addresses:");
  for (int i = 0; i < numStations; i++) {
    Serial.println(stationMacs[i]);
    bssid = stationMacs[i];
    // Check if this is a new station
    bool newStation = true;
    for (int j = 0; j < numClients; j++) {
      if (stationMacs[i] == clients[j].macAddress) {
        newStation = false;
        break;
      }
    }
    if (newStation) {
      // Update join time only for new stations
      clients[numClients].macAddress = stationMacs[i];
      clients[numClients].name = name;
      clients[numClients].joinTime = millis();
      clients[numClients].connectionTime = 0;
      numClients++;
    }
  }

  // Update connection time for each client
  for (int i = 0; i < numClients; i++) {
    bool found = false;
    for (int j = 0; j < numStations; j++) {
      if (clients[i].macAddress == stationMacs[j]) {
        found = true;
        break;
      }
    }
    if (found) {
      clients[i].connectionTime = millis() - clients[i].joinTime;
    }
  }
  
  Serial.println("-----------------");
}

void setup() {
  Serial.begin(115200);
  pinMode(LED, OUTPUT);

  WiFi.softAP("ESP32-AP", "password");
  delay(1000);
  //WiFi.softAPdisconnect(true);
  delay(1000);

  WiFi.begin("hotspot", "@pritam123");
  Serial.println("Wifi connected..........");
  delay(1000);
  
  timeClient.begin();

  if (time_calibration == false) {
    for (int i = 0; i <= 10; i++) {
      timeClient.update();
      Serial.println("Time calibration: " + timeClient.getFormattedTime());
      delay(500);
    }
    Serial.println("Time calibration succesful:");
    time_calibration = true;
  }

  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);
  Serial.println("Database conneced.......");
  Serial.println(numStations);
  Serial.println(bssid);
}

void loop() {
  timeClient.update();
  PrintStations();
  numStations = WiFi.softAPgetStationNum();
  count = numStations;

  delay(1000);

  if (Firebase.ready() && WiFi.status() == WL_CONNECTED && count != 0) {
    for (int i = 0; i < numStations; i++) {
      String path = "/station/" + stationMacs[i];
      Firebase.setString(firebaseData, (path + "/Name").c_str(), name);
      Firebase.setInt(firebaseData, (path + "/sl_no").c_str(), i + 1);
      Firebase.setString(firebaseData, (path + "/Connection_Time").c_str(), String(clients[i].connectionTime / 1000) + "s");
      
      count--; 
    }
  }
  else if (count == 0) {
    Serial.println("all user upload succesfully");
  }
  else {
    Serial.println("error");
  }
}
